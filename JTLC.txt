--@name JTLS - JLearn Target Leading Computer
--@author Jagger
--@server
--@includedir JLearn/lib

local Matrix = require("JLearn/lib/jl_matrix.txt")
local BData = require("JLearn/lib/jl_ballistics.txt")
local Reg = require("JLearn/lib/jl_regression.txt")

---------------
-- CONSTANTS --
---------------
-- Maximum time to generate bullet data. Set this low (3s or so) for best results, or don't set it at all to use the default value, nil (recommended)
-- It is also very recommended that you use a projectile with a muzzle velocity of 400 m/s or higher, as the model will have a hard time aproximating otherwise
-- Just don't use a lmao low velocity howitzer and try to simulate it for 5s and it should be fine
MAX_SIM_TIME = nil
-- Aproximate distance offset (in meters) after the target to detonate the round, helps with getting more direct hits
FUZE_OFFSET = 2
-- Acceleration filtering coefficient. The smaller it is, the lower the frequencies it filters are.
-- Minimum is 0 for max filtering (don't, it filters ALL of it out), maximum is 1 for no filtering
-- In layman's terms -> set low to ignore jitteriness of targets, set high for fast responsiveness
KD_ACCEL = 0.15
-- Aimpoint relative position filtering coefficient
-- Same as above. Higher values mean higher responsiveness, but more jittery aiming.
KD_AIMPOINT = 0.05
-- Time to keep tracking a target after sight has been lost
TRACK_TIME = 3

wire.adjustInputs(
    {"Active", "Ammo_crate", "Radar", "Target_ID", "Base", "Gun", "Target"},
    {"number", "entity", "wirelink", "number", "entity", "entity", "entity"}
)
wire.adjustOutputs({"Aimpos", "Fuze", "Tracking"}, {"vector", "number", "number"})

-- Server variables
local reg_model = nil
local last_think = timer.curtime()
local old_dist = 0
local target_pos = Vector(0,0,0)
local target_vel = Vector(0,0,0)
local old_vel = Vector(0,0,0)
local target_accel = Vector(0,0,0)
local radar_idx = 0
local final_offset = Vector(0)
local rel_offset = Vector(0)
local guessing_time = 0
local tracking = 0

-- Simplified low pass filter
local function lowPassFilter(old_val, new_val, coef)
    return (1-coef)*old_val + coef*new_val
end

-- Determine the target's position offset after a certain time considering its velocity and localized acceleration
local function calcTargetOffset(time, vel, accel)
    local offset = Vector(0,0,0)
    if time <= 0 then return Vector(0) end
    while time > 0 do
        time = time - 0.1
        local delta_t = time > 0 and 0.1 or -time
        local delta_v, _ = localToWorld(accel, Angle(0), Vector(0,0,0), vel:getAngle())
        vel = vel + delta_v * delta_t
        offset = offset + vel * delta_t
    end
    return offset
end

-- Main loop: get target info, predict
local function main()
    if wire.ports.Active == 0 then
        wire.ports.Fuze = 0
        return
    end

    local base = wire.ports.Base
    if not isValid(base) then return end

    -- Time since last think
    local delta_t = timer.curtime() - last_think
    last_think = timer.curtime()
                                                   -- otherwise, fallback to radar
    local radar = wire.ports.Radar
    if not isValid(radar) then return end
    local target_id = wire.ports.Target_ID
    if target_id ~= 0 then                                  -- If a target ID is supplied
        if radar.IDs[radar_idx] ~= target_id then           -- If index is outdated
            local found = 0
            for i, v in ipairs(radar.IDs) do                -- Update the index (search)
                if v == target_id then                      -- If target is found
                    radar_idx = i
                    found = 1
                    break
                end
            end
            if found == 0 then return end
        end
    else
        radar_idx = 1                                       -- Use index 1 if not specified
    end

    if radar.Position[radar_idx] and old_dist ~= radar.Distance[radar_idx] then   -- New value: radar updated
        old_dist   = radar.Distance[radar_idx]
        target_pos = radar.Position[radar_idx]
        old_vel    = target_vel
        target_vel = radar.Velocity[radar_idx]
        -- Localize and filter the acceleration
        local new_accel = worldToLocal((target_vel - old_vel)/0.1, Angle(0,0,0), Vector(0,0,0), old_vel:getAngle())
        target_accel = lowPassFilter(target_accel, new_accel, KD_ACCEL)
        local world_accel, _ = localToWorld(target_accel, Angle(0,0,0), Vector(0,0,0), target_vel:getAngle())
        target_vel = target_vel + world_accel*delta_t
        target_pos = target_pos + target_vel*delta_t
        guessing_time = 0
    end
    if guessing_time < TRACK_TIME then
        guessing_time = guessing_time + delta_t
        tracking = 1
    else
        tracking = 0
    end
    wire.ports.Tracking = tracking

    if tracking == 1 then
        local world_accel, _ = localToWorld(target_accel, Angle(0,0,0), Vector(0,0,0), target_vel:getAngle())
        -- Only count acceleration if the target is being tracked properly
        if guessing_time < 0.5 then target_vel = target_vel + world_accel*delta_t end
        target_pos = target_pos + target_vel*delta_t
    else
        wire.ports.Fuze = 0
        return
    end

    -- Get the reference position (the gun's muzzle, the reference entity, or in last case the base)
    local ref_pos = nil
    local gun = wire.ports.Gun
    if isValid(gun) then
        local muzzle_pos, _ = gun:getAttachment(1)
        if muzzle_pos then
            ref_pos = muzzle_pos
        else
            ref_pos = gun:getPos()
        end
    else
        ref_pos = base:getPos()
    end

    local to_target_orig = target_pos - ref_pos
    local to_target = to_target_orig
    local new_vel = target_vel
    local time, z_comp = 0, 0
    local offset = Vector(0,0,0)
    local offset_tab = {}
    local step_size_sqr = 0

    -- Iterate N times
    for i = 1, 4, 1 do
        -- Predict firing on the target position
        local pred = reg_model:predict({to_target})
        time, z_comp = pred[1], pred[2]
        -- Update future target position with the velocity
        local old_offset = offset
        offset = calcTargetOffset(time, target_vel, target_accel)
        to_target = to_target_orig + offset
        step_size_sqr = (offset-old_offset):getLengthSqr()
        if step_size_sqr < 25 then break end
    end
    -- If a good aproximation was not achieved
    if step_size_sqr >= 25 then
        -- Aproximate a few iterations more with filtering
        for i = 1, 4, 1 do
            local pred = reg_model:predict({to_target})
            time, z_comp = pred[1], pred[2]
            local new_offset = calcTargetOffset(time, target_vel, target_accel)
            offset = lowPassFilter(offset, new_offset, 0.3)
            to_target = to_target_orig + offset
            step_size_sqr = (offset-new_offset):getLengthSqr()
            if step_size_sqr < 25 then break end
        end
    end

    -- Filter the offset localized to the target's velocity
    local new_rel_offset = worldToLocal(offset, Angle(0,0,0), Vector(0,0,0), target_vel:getAngle())
    rel_offset = lowPassFilter(rel_offset, new_rel_offset, KD_AIMPOINT)
    local final_offset = localToWorld(rel_offset, Angle(0,0,0), Vector(0,0,0), target_vel:getAngle()) + Vector(0, 0, z_comp)
    to_target = to_target_orig + final_offset

    wire.ports.Aimpos = ref_pos + to_target
    wire.ports.Fuze = time
end

local model_corout = coroutine.wrap(Reg.directFireModel)
local function waitForModel()
    reg_model = model_corout(crate, -10, 90, MAX_SIM_TIME)
    if not reg_model then return end
    
    hook.remove("think", "waitForModel")
    hook.add("think", "main", main)
end

local printed_warning = 0
crate = nil
-- Wait for ammo to be valid and create the model
local function waitForAmmo()
    if not wire.ports.Ammo_crate:isValid() then
        if not printed_warning then
            print("[Ammo] ", Color(200,200,0), "Waiting for ammo to be wired...")
            printed_warning = 1
        end
        return
    end

    crate = wire.ports.Ammo_crate
    -- Update the fuze offset (translate it to time)
    FUZE_OFFSET = FUZE_OFFSET / crate:acfMuzzleVel()
    hook.remove("think", "waitForAmmo")
    hook.add("think", "waitForModel", waitForModel)
end
hook.add("think", "waitForAmmo", waitForAmmo)


