--@name JAC - JLearn Artillery Computer
--@author Jagger
--@shared
--@include JLearn/lib/jl_matrix.txt
--@include JLearn/lib/jl_ballistics.txt

local Matrix = require("JLearn/lib/jl_matrix.txt")
local BData = require("JLearn/lib/jl_ballistics.txt")

    ---------------
    -- CONSTANTS --
    ---------------
if CLIENT then
    -- Vertical range (in meters) in which to simulate the shots. For example, if set to 50, the regression trains for targets up to 50m above
    -- and below your horizontal plane. Setting this too high may lead to inacuracy.
    VERT_RANGE = 100
else

end

-- Formats the model's input for both training and prediction
local function formatInput(h1, v1)
    ----------------------
    -- REGRESSION MODEL --
    ----------------------
    -- Here you should design a series of operations that relate the input variables with the output variables.
    -- It can be anything you want, but a good aproach is a polynomial component for each of the inputs
    --  and also some components that correlate them (if the inputs aren't fully independent).
    -- Having a constant (1) component is also pretty important, and helps you gauge how correctly the model predicts,
    --  as a high coefficient for the constant indicates a poorly fit model
    -- The model below is extremely robust, I don't believe it needs improving, but you can try playing with it if you want
    local h2 = h1^2
    local h3 = h1^3
    local h4 = h2^2
    local h5 = h1^5
    local v2 = v1^2
    local v3 = v1^3
    local v4 = v2^2

    return {1, h1, h2, h3, h4, h5, h1*v1, h2*v1, h3*v1, h4*v1, h1*v2}
end

if CLIENT then
    local bdata = nil

    -- From meters to game units
    VERT_RANGE = VERT_RANGE * 39.37

    local function generateDataset()
        print("[Dataset] ", Color(200,200,0), "Generating...")
        local time = MAX_SIM_TIME or 2*32768 / bdata.muzzle_vel    -- Time to cover 2 maps worth of distance (consider diagonals and slowdown)
        local dataset = {}
        dataset.i = 1
        dataset.X = {}
        dataset.Y = {}
        -- For 1 degree increments
        for ang = 45, 90, 1 do
            local points = bdata:SimIndirectFire(ang, VERT_RANGE, 10)
            -- Process the data points
            for k,v in ipairs(points) do
                local pos = v[1]
                local time = v[2]
                dataset.X[dataset.i] = formatInput(pos[1], pos[3])
                dataset.Y[dataset.i] = {math.cos(math.rad(ang)), time}
                dataset.i = dataset.i + 1
            end
            if quotaAverage() > quotaMax()*0.75 then coroutine.yield() end
        end
        print("[Dataset] ", Color(0,200,0), "Completed!")
        return dataset
    end

    local function fit()
        print("[Fit] ", Color(200,200,0), "Fitting...")
        local dataset_corout = coroutine.create(generateDataset)
        local dataset = nil
        -- Generate the dataset
        while not dataset do
            dataset = coroutine.resume(dataset_corout)
            coroutine.yield()
        end

        -- Generate the matrixes from the dataset
        local X = Matrix:fromTable(dataset.X)
        local Y = Matrix:fromTable(dataset.Y)
        -- Perform a regression, minimizing the sum of squared errors through the normal equation
        local X_T = X:transpose()
        local coefs = (X_T:multiply(X)):invert():multiply(X_T:multiply(Y))
        print("[Fit] ", Color(0,200,0), "Completed!")
        print("[Fit] ", Color(0,200,0), "Coeficients:")
        coefs:printSci(4)

        -- To ensure tick limit is not exceeded for high dataset sizes
        coroutine.yield()

        print("[Evaluation] ", Color(200,200,0), "Evaluating...")

        -- Predict on the training data
        local Y_pred = X:multiply(coefs)
        --Y_pred:print(6)
        local avg_err_a, avg_err_t = 0, 0
        -- For every prediction
        for i = 1, Y_pred.lines, 1 do
            -- Calculate the absolute errors
            avg_err_a = avg_err_a + math.abs(Y_pred[i][1] - Y[i][1])
            avg_err_t = avg_err_t + math.abs(Y_pred[i][2] - Y[i][2])
        end
        -- Calculate their average
        avg_err_a = avg_err_a / Y_pred.lines
        avg_err_t = avg_err_t / Y_pred.lines

        print("[Evaluation] ", Color(0,200,0), "Average absolute error:")
        print(string.format("Angle: %10.3f", math.deg(math.acos(0) - math.acos(avg_err_a))))
        print(string.format("Time:  %10.3f", avg_err_t))

        if avg_err_a > 0.1 or avg_err_t > 0.1 then
            print("[Evaluation] ", Color(255,0,0), "WARNING!",  Color(255,150,0)," Large average error! Decrease the vertical range for best results!")
        else
            print("[Evaluation] ", Color(0,200,0), "Completed! (Good results)")
        end
        print("\n[Tip] ", Color(0,200,0), "Open the console for better readability!\n")

        return coefs
    end
    local fit_corout = coroutine.create(fit)

    local function main()
        -- Generate the coeficients
        coefs = coroutine.resume(fit_corout)
        if not coefs then return end

        -- Encode the table in JSON and compress for sending
        local enc = json.encode(coefs:toTable())
        net.start("coef")
        net.writeStream(enc, true)
        net.send()
        hook.remove("think", "main")
    end

    -- When receiving the bullet data from the server
    net.receive("bdata", function()
        net.readStream(function(contents)
            local tab = json.decode(contents)
            bdata = BData:fromTable(tab)
            hook.add("think", "main", main)
        end)
    end)

elseif SERVER then
    wire.adjustInputs({"Ammo_crate", "Gun", "Target"}, {"entity", "entity", "vector"})
    wire.adjustOutputs({"Pitch", "Time"}, {"number", "number"})

    -- Server variables
    local beta = nil
    local X = Matrix:fromTable({formatInput(0,0)})
    local last_think = timer.curtime()

    -- Perform a regression
    local function predict(to_target)
        -- Pitch to the target
        local h = math.sqrt(to_target[1]^2 + to_target[2]^2)
        local v = to_target[3]
        -- Generate the input data matrix
        X[1] = formatInput(h, v)
        -- Predict
        local Y = X:multiply(beta)
        return -math.deg(math.acos(Y[1][1])), Y[1][2]
    end

    -- Main loop: get target info, predict
    local function main()
        if not isValid(wire.ports.Gun) or not wire.ports.Target then return end

        -- Get the reference position (the gun's muzzle, the reference entity, or in last case the base)
        local ref_pos = nil
        local gun = wire.ports.Gun
        if isValid(gun) then
            local muzzle_pos, _ = gun:getAttachment(1)
            if muzzle_pos then
                ref_pos = muzzle_pos
            else
                ref_pos = gun:getPos()
            end
        else
            ref_pos = base:getPos()
        end
        local to_target = wire.ports.Target - ref_pos

        -- Predict firing on the target position
        local ang, time = predict(to_target)

        wire.ports.Pitch = ang
        wire.ports.Time = time
    end

    local printed_warning = 0

    -- Wait for ammo to be valid, send data to client
    -- Delay is needed due to some network fuckery (client wouldn't receive the message otherwise)
    timer.create("wait_to_send", 0.5, 1, function()
        hook.add("think", "wait_ammo", function()
            if not wire.ports.Ammo_crate:isValid() then
                if printed_warning == 0 then
                    print("[Ammo] ", Color(200,200,0), "Waiting for ammo to be wired...")
                    printed_warning = 1
                end
                return
            end

            local bdata = BData:new(wire.ports.Ammo_crate)
            local enc = json.encode(bdata:toTable())
            net.start("bdata")
            net.writeStream(enc, true)
            net.send()
            hook.remove("think", "wait_ammo")
        end)
    end)

    -- Wait for client response with the coeficients
    net.receive("coef", function()
        net.readStream(function(contents)
            local tab = json.decode(contents)
            beta = Matrix:fromTable(tab)
            hook.add("think", "main", main)
        end)
    end)
end


